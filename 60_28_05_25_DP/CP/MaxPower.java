/*You are the lead engineer in a high-tech robot factory with 'n production units', 
each assigned a number from 0 to n - 1. Every unit contains a specialized 
'robot component', and the efficiency level of each component is represented by 
an array components, where components[i] is the efficiency level of the i-th component.

As part of the factory shutdown protocol, you need to deactivate all the units 
one by one. However, the deactivation process is tricky — when you shut down the 
i-th unit, it triggers a chain reaction with its neighboring units, generating:

    components[i - 1] * components[i] * components[i + 1] power units

If i - 1 or i + 1 falls outside the range of the array, assume there’s a dummy 
component with efficiency level 1 installed for safety compliance.

Your objective is to maximize the total power generated by planning the shutdown
order strategically.

Example 1:
Input=
2 1 3 5
output=
51

Explanation:
Shutdown order:
[2,1,3,5] → [2,3,5] → [2,5] → [5] → []
Power generated:
2*1*3 + 2*3*5 + 1*2*5 + 1*5*1 = 51


Example 2:
Input= 
8 9
Output=
81

Explanation:
Deactivate both units in any order: 1*8*9 + 1*9*1 = 81

Constraints:

-> n == components.length
-> 1 <= n <= 300
-> 0 <= components[i] <= 100
 */
import java.util.*;

public class MaxPower{
    public static void main (String[] args) {
        Scanner cin = new Scanner(System.in);
        String inp [] = cin.nextLine().split(" ");
        int arr [] = new int[inp.length];
        for(int i = 0; i < inp.length; i++){
            arr[i] = Integer.parseInt(inp[i]);
        }
        System.out.println(find(arr,inp.length));
        cin.close();
    }
    static int find(int arr[], int n){
        int newA [] = new int[n+2];
        for(int i = 0; i < n; i++){
            newA[i+1] = arr[i];
        }
        newA[0] = 1;
        newA[n+1] = 1;
        
        int memo[][] = new int[n+3][n+3];
        for(int i []: memo){
            Arrays.fill(i,-1);
        }
        return recur(newA,0,n+1,memo);
    }
    static int recur(int arr[], int i , int j, int memo[][]){

        if(i+1==j){
            return 0;
        }
        if(memo[i][j]!=-1){
            return memo[i][j];
        }
        int res = Integer.MIN_VALUE;
        for(int k = i+1; k < j; k++){
            int curr =  recur(arr,i,k,memo) + recur(arr,k,j,memo) + arr[i]*arr[k]*arr[j];
            res = Math.max(res,curr);
        }
        
        return memo[i][j] = res;
    }
}