import React, { useState } from 'react';
import axios from 'axios';
import jsPDF from 'jspdf';
import './App.css';

function App() {
  const [id, setId] = useState('');
  const [report, setReport] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleChange = e => setId(e.target.value);

  const handleSubmit = async e => {
    e.preventDefault();
    setLoading(true);
    setError('');
    try {
      const res = await axios.get(`http://localhost:5000/api/report/${id}`);
      setReport(res.data);
    } catch (err) {
      setError('Report not found!');
      setReport(null);
    }
    setLoading(false);
  };

  const generatePDF = () => {
    if (!report) return;
    const doc = new jsPDF('p', 'pt', 'a4');
    doc.setFillColor(33, 150, 243);
    doc.rect(0, 0, doc.internal.pageSize.getWidth(), 70, 'F');
    doc.setFontSize(28);
    doc.setTextColor(255, 255, 255);
    doc.setFont('helvetica', 'bold');
    doc.text('Keshav High School', doc.internal.pageSize.getWidth() / 2, 45, { align: 'center' });

    doc.setFontSize(16);
    doc.setTextColor(33, 33, 33);
    doc.setFont('helvetica', 'bold');
    doc.text(`Progress Report`, 40, 100);

    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(`Date: ${report.date ? new Date(report.date).toLocaleDateString() : ''}`, 40, 120);

    doc.setFontSize(13);
    doc.setFont('times', 'normal');
    doc.setTextColor(44, 62, 80);

    const margin = 40;
    const maxWidth = doc.internal.pageSize.getWidth() - margin * 2;
    const lines = doc.splitTextToSize(
      `The ${report.name} in subject ${report.subject} performed as follows:\n\n${report.performance}`,
      maxWidth
    );
    doc.text(lines, margin, 150);

    doc.setFontSize(11);
    doc.setTextColor(120, 120, 120);
    doc.setFont('helvetica', 'italic');
    doc.text('This report is auto-generated by Keshav High School Progress Report System.', margin, doc.internal.pageSize.getHeight() - 50);

    doc.save('progress_report.pdf');
  };

  return (
    <div className="container">
      <h2>Get Progress Report</h2>
      <form className="form-card" onSubmit={handleSubmit}>
        <div className="input-group">
          <label htmlFor="id">Report ID</label>
          <input
            id="id"
            name="id"
            type="text"
            placeholder="Enter report ID"
            value={id}
            onChange={handleChange}
            autoComplete="off"
            required
          />
        </div>
        <button type="submit" disabled={loading}>
          {loading ? "Fetching..." : "Get Report"}
        </button>
      </form>
      {error && <div style={{ color: 'red', marginTop: 12 }}>{error}</div>}
      {report && (
        // <div className="report-section">
        //   <div className="report-card">
        //     <h3>Report for {report.name}</h3>
        //     <p><strong>Subject:</strong> {report.subject}</p>
        //     <p><strong>Score:</strong> {report.score}</p>
        //     <p><strong>Remarks:</strong> {report.remarks}</p>
            <button onClick={generatePDF} className="pdf-btn">Download PDF</button>
          // </div>
        // </div>
      )}
    </div>
  );
}

export default App;